package com.wlh.dao;

import java.sql.*;
import java.util.Arrays;
import java.util.Map;

import org.apache.commons.collections.ListUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.text.translate.CharSequenceTranslator;
import org.junit.Test;

import com.wlh.util.MapUtils;

public class DerbyTest {
	 private static String driver = "org.apache.derby.jdbc.EmbeddedDriver";
	    private static String protocol = "jdbc:derby:db3;create=true"; // 在工程目录下创建数据库
	    // private static String protocol = "jdbc:derby:db/db3;create=true";    //在工程目录下db目录中创建数据库
	    // private static String protocol = "jdbc:derby:D:/mydbs/db3;create=true";    //在D:/mydbs/目录下创建数据库

	    public static void main(String[] args) {
	        try {
	            Class.forName(driver).newInstance();
	            System.out.println("Loaded the appropriate driver");
	            Connection conn = DriverManager.getConnection(protocol);
	            Statement stmt = conn.createStatement();
	            stmt.executeUpdate("create table stu(id int not null generated by default as identity,stuname varchar(20),email varchar(30))");

	            for (String str : "one,two,three,four,five".split(",")) {
	                String sql = "insert into stu(stuname,email) values('" + str + "','" + str + "@test.com')";
	                System.out.println(sql);
	                stmt.addBatch(sql);
	            }
	            stmt.executeBatch();
	            System.out.println("insert over");
	            conn.commit();
	            while(true){
	            	Thread.sleep(10000);
	            } 
//	            stmt.close();
//	            conn.close();

	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	    }
	    @Test
	    public void runDbUtil() throws SQLException{
	    	QueryRunner qr = new QueryRunner();
//	    	qr.execute(conn, sql, params)
	    	PreparedStatement stmt = null;
//	    	qr.insert(conn, sql, rsh)
//	    	stmt.add
//	    	qr.fillStatement(stmt, params);
	    	String sql = "insert into student values(?,?,?,?)";
	    	int charCount = Character.charCount(Character.codePointAt(sql, 2));
	    	System.out.println(charCount); 
	    	
	    	sql = "insert into student values(&name ,? ,&password ,?,?)";
	    	NamedPreparedTranslator translator = new NamedPreparedTranslator('&', ' ', '?');
	    	String translate = translator.translate(sql);
	    	
	    	Map map1 = ArrayUtils.toMap(new String[][] {
	    		         {"name", "#xiao"},
	    		         {"password", "#00FF00"},
	    		         {"BLUE", "#0000FF"}});
	    	System.out.println(translator.getNamedPrepared());
	    	System.out.println(translate); 
	    	Object[] params = translator.getParams(map1);
	    	System.out.println(Arrays.toString(params));
	    	System.out.println( translator.getNamedPrepared() );
//	    	CharSequenceTranslator
//	    	qr.update(sql);
//	    	qr.query(conn, sql, rsh)
//	    	qr.query(sql, param, rsh)
	    	batch("",new Object[][]{
	    			{"",""}
	    	});
	    }
	    int[] batch(String sql, Object[][] params) {
			return null;
		}
	    public void runCall() throws SQLException{
	    	Connection connection = null;
			CallableStatement call = connection.prepareCall("{call pro3(?)}");
//	    	call.registerOutParameter(1, OracleTypes.CURSOR); //对于out参数，声明游标(集合)类型
//			call.registerOutParameter(parameterIndex, sqlType);
//			call.registerOutParameter(parameterIndex, sqlType);
			
	    	ResultSet rs = null;
//	    	ResultSet rs = ((OracleCallableStatement)call).getCursor(1); 
	    	while(rs.next()){
	    		String name = rs.getString("ename");		
	    		double sal = rs.getDouble("sal");
	    	}
	    	
	    }
}
