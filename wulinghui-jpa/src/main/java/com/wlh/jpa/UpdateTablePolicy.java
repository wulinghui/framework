package com.wlh.jpa;

import static com.wlh.jpa.JpaHelper.getHELPER;

import java.sql.SQLException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import javax.sql.DataSource;

import org.apache.commons.dbutils.QueryRunner;

import com.wlh.jpa.entity.ManyOnManyEntity;
import com.wlh.jpa.entity.ORMEntity;
import com.wlh.jpa.entity.PrimitiveEntity;
import com.wlh.jpa.handlers.QueryRunnerLog;
import com.wlh.log.ILogger;
import com.wlh.log.LogMSG;

public class UpdateTablePolicy extends TablePolicy {
	private static ILogger logger = LogMSG.getLogger();
	
	public static final Map<Class,String> type2col = new HashMap<>();
	static{
		type2col.put(int.class, "NUMBER(10)");
		type2col.put(Integer.class, "NUMBER(10)");
		type2col.put(String.class, "VARCHAR(100)");
	}
	protected QueryRunner queryRunner;
	
	public UpdateTablePolicy( DataSource ds ) {
		queryRunner = new QueryRunnerLog(ds);
	}

	/*
	 * 
creat table student
(id NUMBER PRIMARY KEY,
name VARCHAR(20),
email CHAR(40),
registtime DATE DEFAULT SYSDATE);

create table stu(id int not null generated by default as identity
,stuname varchar(20),email varchar(30))

	 */
	public void createTable(Collection<Class<?>> list) {
		for (Class<?> class1 : list) {
			createTable(class1);
		}
	}
	public void createTable(Class<?> class1) {
		StringBuilder sb = new StringBuilder("CREATE TABLE ");
		
		sb.append( getHELPER().getTableName( class1) );
		sb.append('(');
		ORMEntity ormEntity = new ORMEntity(class1);
		// 建表字段:普通的和系统对应，一对一（多） 字符型。 
		// 多对多的字段不建立。
		for (PrimitiveEntity ele : ormEntity.getAllExecptManyOnMany()) {
			sb.append(ele.getColumnName());
			sb.append(' ');
			sb.append(ele.getColumnType());
			sb.append(',');
		}
		sb.deleteCharAt(sb.length() -1 );
		sb.append(')');
		executeCreate(sb.toString());
		// 建立多对多的中间表。
		for (ManyOnManyEntity element : ormEntity.getAllManyOnMany()) {
			executeCreate( element.getManyOnManyCreatTableSql() );
		}
	}
//	public void createTable(Class<?> class1) {
//		StringBuilder sb = new StringBuilder("CREATE TABLE ");
//		//移除Jpa的集合
//		List<Field> allFieldsList = 
//				ListUtils.removeAll(FieldUtils.getAllFieldsList(class1), 
//						FieldUtils.getAllFieldsList(JpaEntity.class));
//		
//		sb.append( getHELPER().getTableName( class1) );
//		sb.append("(id "+getCol(String.class)+" PRIMARY KEY");
//		for (Field field : allFieldsList) {
//			addField(sb, field);
//		}
//		
//		sb.append(')');
//		try {
//			queryRunner.update(sb.toString());
//			logger.warn("createTable success:"+sb);
//		} catch (SQLException e) {
//			// in 说明存在。
//			logger.debug(e);
//		}
//	}

	protected void executeCreate(String sb) {
		try {
			queryRunner.update(sb);
//			logger.warn("createTable success:"+sb);
		} catch (SQLException e) {
			// in 说明存在。
			logger.debug(e);
		}
	}

//	protected void addField(StringBuilder sb, Field field) {
//		sb.append(',');
//		sb.append(field.getName());
//		sb.append(' ');
//		sb.append( getCol(field.getType()) );
//	}
//	protected String getCol(Class<?> class1) {
//		return type2col.get(class1);
//	}
	
}
